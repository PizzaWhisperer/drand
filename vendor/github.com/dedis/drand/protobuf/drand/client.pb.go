// Code generated by protoc-gen-go. DO NOT EDIT.
// source: drand/client.proto

package drand

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import element "github.com/dedis/drand/protobuf/crypto"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// PublicRandRequest requests a public random value that has been generated in a
// unbiasable way and verifiable.
type PublicRandRequest struct {
	// round uniquely identifies a beacon. If round == 0, then the response will
	// contain the last.
	// XXX better ways to do that...
	Round uint64 `protobuf:"varint,1,opt,name=round" json:"round,omitempty"`
}

func (m *PublicRandRequest) Reset()                    { *m = PublicRandRequest{} }
func (m *PublicRandRequest) String() string            { return proto.CompactTextString(m) }
func (*PublicRandRequest) ProtoMessage()               {}
func (*PublicRandRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *PublicRandRequest) GetRound() uint64 {
	if m != nil {
		return m.Round
	}
	return 0
}

// PublicRandResponse holds a signature which is the random value. It can be
// verified thanks to the distributed public key of the nodes that have ran the
// DKG protocol and is unbiasable. The randomness can be verified using the BLS
// verification routine with the message "round || previous_rand".
type PublicRandResponse struct {
	Round      uint64 `protobuf:"varint,1,opt,name=round" json:"round,omitempty"`
	Previous   []byte `protobuf:"bytes,2,opt,name=previous,proto3" json:"previous,omitempty"`
	Randomness []byte `protobuf:"bytes,3,opt,name=randomness,proto3" json:"randomness,omitempty"`
}

func (m *PublicRandResponse) Reset()                    { *m = PublicRandResponse{} }
func (m *PublicRandResponse) String() string            { return proto.CompactTextString(m) }
func (*PublicRandResponse) ProtoMessage()               {}
func (*PublicRandResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *PublicRandResponse) GetRound() uint64 {
	if m != nil {
		return m.Round
	}
	return 0
}

func (m *PublicRandResponse) GetPrevious() []byte {
	if m != nil {
		return m.Previous
	}
	return nil
}

func (m *PublicRandResponse) GetRandomness() []byte {
	if m != nil {
		return m.Randomness
	}
	return nil
}

// PrivateRandRequest is the message to send when requesting a private random
// value.
type PrivateRandRequest struct {
	// Request must contains a public key towards which to encrypt the private
	// randomness.
	Request *ECIESObject `protobuf:"bytes,1,opt,name=request" json:"request,omitempty"`
}

func (m *PrivateRandRequest) Reset()                    { *m = PrivateRandRequest{} }
func (m *PrivateRandRequest) String() string            { return proto.CompactTextString(m) }
func (*PrivateRandRequest) ProtoMessage()               {}
func (*PrivateRandRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *PrivateRandRequest) GetRequest() *ECIESObject {
	if m != nil {
		return m.Request
	}
	return nil
}

type PrivateRandResponse struct {
	// Response contains the private randomness encrypted towards the client's
	// request key.
	Response *ECIESObject `protobuf:"bytes,1,opt,name=response" json:"response,omitempty"`
}

func (m *PrivateRandResponse) Reset()                    { *m = PrivateRandResponse{} }
func (m *PrivateRandResponse) String() string            { return proto.CompactTextString(m) }
func (*PrivateRandResponse) ProtoMessage()               {}
func (*PrivateRandResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *PrivateRandResponse) GetResponse() *ECIESObject {
	if m != nil {
		return m.Response
	}
	return nil
}

type ECIESObject struct {
	Ephemeral  *element.Point `protobuf:"bytes,1,opt,name=ephemeral" json:"ephemeral,omitempty"`
	Ciphertext []byte         `protobuf:"bytes,2,opt,name=ciphertext,proto3" json:"ciphertext,omitempty"`
	Nonce      []byte         `protobuf:"bytes,3,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (m *ECIESObject) Reset()                    { *m = ECIESObject{} }
func (m *ECIESObject) String() string            { return proto.CompactTextString(m) }
func (*ECIESObject) ProtoMessage()               {}
func (*ECIESObject) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func (m *ECIESObject) GetEphemeral() *element.Point {
	if m != nil {
		return m.Ephemeral
	}
	return nil
}

func (m *ECIESObject) GetCiphertext() []byte {
	if m != nil {
		return m.Ciphertext
	}
	return nil
}

func (m *ECIESObject) GetNonce() []byte {
	if m != nil {
		return m.Nonce
	}
	return nil
}

func init() {
	proto.RegisterType((*PublicRandRequest)(nil), "drand.PublicRandRequest")
	proto.RegisterType((*PublicRandResponse)(nil), "drand.PublicRandResponse")
	proto.RegisterType((*PrivateRandRequest)(nil), "drand.PrivateRandRequest")
	proto.RegisterType((*PrivateRandResponse)(nil), "drand.PrivateRandResponse")
	proto.RegisterType((*ECIESObject)(nil), "drand.ECIESObject")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Randomness service

type RandomnessClient interface {
	Public(ctx context.Context, in *PublicRandRequest, opts ...grpc.CallOption) (*PublicRandResponse, error)
	Private(ctx context.Context, in *PrivateRandRequest, opts ...grpc.CallOption) (*PrivateRandResponse, error)
}

type randomnessClient struct {
	cc *grpc.ClientConn
}

func NewRandomnessClient(cc *grpc.ClientConn) RandomnessClient {
	return &randomnessClient{cc}
}

func (c *randomnessClient) Public(ctx context.Context, in *PublicRandRequest, opts ...grpc.CallOption) (*PublicRandResponse, error) {
	out := new(PublicRandResponse)
	err := grpc.Invoke(ctx, "/drand.Randomness/Public", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *randomnessClient) Private(ctx context.Context, in *PrivateRandRequest, opts ...grpc.CallOption) (*PrivateRandResponse, error) {
	out := new(PrivateRandResponse)
	err := grpc.Invoke(ctx, "/drand.Randomness/Private", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Randomness service

type RandomnessServer interface {
	Public(context.Context, *PublicRandRequest) (*PublicRandResponse, error)
	Private(context.Context, *PrivateRandRequest) (*PrivateRandResponse, error)
}

func RegisterRandomnessServer(s *grpc.Server, srv RandomnessServer) {
	s.RegisterService(&_Randomness_serviceDesc, srv)
}

func _Randomness_Public_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicRandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RandomnessServer).Public(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/drand.Randomness/Public",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RandomnessServer).Public(ctx, req.(*PublicRandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Randomness_Private_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrivateRandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RandomnessServer).Private(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/drand.Randomness/Private",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RandomnessServer).Private(ctx, req.(*PrivateRandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Randomness_serviceDesc = grpc.ServiceDesc{
	ServiceName: "drand.Randomness",
	HandlerType: (*RandomnessServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Public",
			Handler:    _Randomness_Public_Handler,
		},
		{
			MethodName: "Private",
			Handler:    _Randomness_Private_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "drand/client.proto",
}

func init() { proto.RegisterFile("drand/client.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 399 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x52, 0xcd, 0x8e, 0xd3, 0x30,
	0x10, 0x56, 0x16, 0x76, 0x5b, 0x66, 0xf9, 0xd1, 0x7a, 0xf7, 0x10, 0xa2, 0x0a, 0x55, 0x91, 0x10,
	0x05, 0x55, 0xb1, 0x54, 0x6e, 0x1c, 0x8b, 0x7a, 0xe0, 0x44, 0x15, 0xc4, 0xa5, 0x37, 0x27, 0x99,
	0xb6, 0x46, 0x89, 0xed, 0xda, 0x4e, 0x05, 0x42, 0x5c, 0x78, 0x05, 0xde, 0x89, 0x17, 0xe0, 0x15,
	0x78, 0x10, 0x54, 0xdb, 0x0d, 0x41, 0xad, 0xb8, 0xcd, 0x37, 0xdf, 0xe7, 0xf9, 0xf9, 0x3c, 0x40,
	0x2a, 0xcd, 0x44, 0x45, 0xcb, 0x9a, 0xa3, 0xb0, 0x99, 0xd2, 0xd2, 0x4a, 0x72, 0xe9, 0x72, 0xc9,
	0x5d, 0xa9, 0xbf, 0x28, 0x2b, 0x29, 0xd6, 0xd8, 0x74, 0x64, 0x32, 0xda, 0x48, 0xb9, 0xa9, 0x91,
	0x32, 0xc5, 0x29, 0x13, 0x42, 0x5a, 0x66, 0xb9, 0x14, 0xc6, 0xb3, 0xe9, 0x4b, 0xb8, 0x59, 0xb6,
	0x45, 0xcd, 0xcb, 0x9c, 0x89, 0x2a, 0xc7, 0x5d, 0x8b, 0xc6, 0x92, 0x3b, 0xb8, 0xd4, 0xb2, 0x15,
	0x55, 0x1c, 0x8d, 0xa3, 0xc9, 0xfd, 0xdc, 0x83, 0x74, 0x0d, 0xa4, 0x2f, 0x35, 0x4a, 0x0a, 0x83,
	0xe7, 0xb5, 0x24, 0x81, 0xa1, 0xd2, 0xb8, 0xe7, 0xb2, 0x35, 0xf1, 0xc5, 0x38, 0x9a, 0x3c, 0xcc,
	0x3b, 0x4c, 0x9e, 0x01, 0x1c, 0xc6, 0x95, 0x8d, 0x40, 0x63, 0xe2, 0x7b, 0x8e, 0xed, 0x65, 0xd2,
	0x39, 0x90, 0xa5, 0xe6, 0x7b, 0x66, 0xb1, 0x3f, 0xd3, 0x14, 0x06, 0xda, 0x87, 0xae, 0xd3, 0xf5,
	0x8c, 0x64, 0x6e, 0xeb, 0x6c, 0xf1, 0xf6, 0xdd, 0xe2, 0xc3, 0xfb, 0xe2, 0x13, 0x96, 0x36, 0x3f,
	0x4a, 0xd2, 0x05, 0xdc, 0xfe, 0x53, 0x23, 0x0c, 0x9b, 0xc1, 0x50, 0x87, 0xf8, 0x3f, 0x55, 0x3a,
	0x4d, 0xba, 0x83, 0xeb, 0x1e, 0x41, 0xa6, 0xf0, 0x00, 0xd5, 0x16, 0x1b, 0xd4, 0xac, 0x0e, 0xef,
	0x1f, 0x67, 0x47, 0xb7, 0x97, 0x92, 0x0b, 0x9b, 0xff, 0x15, 0x1c, 0xf6, 0x2c, 0xb9, 0xda, 0xa2,
	0xb6, 0xf8, 0xd9, 0x06, 0x17, 0x7a, 0x99, 0x83, 0x73, 0x42, 0x8a, 0x12, 0x83, 0x05, 0x1e, 0xcc,
	0x7e, 0x46, 0x00, 0x79, 0x67, 0x06, 0x61, 0x70, 0xe5, 0x4d, 0x27, 0x71, 0x98, 0xf4, 0xe4, 0xbb,
	0x92, 0xa7, 0x67, 0x98, 0xb0, 0x40, 0xfa, 0xfd, 0xd7, 0xef, 0x1f, 0x17, 0x23, 0x32, 0xa0, 0xca,
	0x91, 0xab, 0x1b, 0xf2, 0x24, 0x84, 0xf4, 0xab, 0xfb, 0xaa, 0x6f, 0xe4, 0x23, 0x0c, 0x82, 0x57,
	0xa4, 0xab, 0x74, 0xe2, 0x7f, 0x92, 0x9c, 0xa3, 0x42, 0x97, 0x5b, 0xd7, 0xe5, 0x51, 0x3a, 0xa4,
	0xca, 0xb3, 0x6f, 0xa2, 0x57, 0xf3, 0x17, 0xab, 0xe7, 0x1b, 0x6e, 0xb7, 0x6d, 0x91, 0x95, 0xb2,
	0xa1, 0x15, 0x56, 0xdc, 0x50, 0x7f, 0xbb, 0xee, 0xf2, 0x8a, 0x76, 0xed, 0x61, 0x71, 0xe5, 0xf0,
	0xeb, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xea, 0x5c, 0xdf, 0x34, 0xda, 0x02, 0x00, 0x00,
}
